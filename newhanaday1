# 인프라엔지니어를 위한 온프레미스 Kubernetes 구축 입문 1일차


## 2교시 : Ubuntu 설치

### 2-1. Root 암호 생성
k8s@master:~$ sudo passwd root
k8s@master:~$ sudo apt-get update
k8s@master:~$ sudo apt install net-tools
k8s@master:~$ sudo apt-get update

### 2-2. 호스트명/호스트 변경
- Master1 호스트명/호스트 변경
```
k8s@master:~$ sudo nano /etc/hostname
'
master1.example.com
'
k8s@master:~$ sudo nano /etc/hosts
'
10.0.2.110  master1.example.com          master1
'

### 2-4. SSH
k8s@master:~$ sudo apt-get update
k8s@master:~$ sudo apt-get install -y openssh-server curl vim tree
k8s@master:~$ sudo systemctl start ssh
k8s@master:~$ sudo systemctl enable ssh
k8s@master:~$ sudo systemctl status ssh
k8s@master:~$ sudo ufw allow ssh
k8s@master:~$ sudo ufw status

## 3-4교시 : Docker와 Docker Compose 설치

### 3-1 Docker 설치와 기본 명령어
- SET UP THE REPOSITORY
```
k8s@master1:~$ sudo apt update
'
sudo apt-get install \
    ca-certificates \
    curl \
    gnupg \
    lsb-release
'
k8s@master1:~$ sudo apt install apt-transport-https
k8s@master1:~$ sudo apt install ca-certificates
k8s@master1:~$ sudo apt install curl
k8s@master1:~$ sudo apt install gnupg
k8s@master1:~$ sudo apt install lsb-release
k8s@master1:~$ sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
k8s@master1:~$ sudo arch
k8s@master1:~$ sudo echo "deb [arch=amd64 signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu k8s@master1:~$(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
k8s@master1:~$ sudo apt-get update

- SET UP THE REPOSITORY
```Docker 설치 ENGINE
k8s@master1:~$ sudo apt-get install docker-ce docker-ce-cli containerd.io docker-compose-plugin
k8s@master1:~$ sudo apt-cache madison docker-ce
k8s@master1:~$ sudo apt-get install docker-ce=5:20.10.12~3-0~ubuntu-focal docker-ce-cli=5:20.10.12~3-0~ubuntu-focal containerd.io
k8s@master1:~$ sudo docker version


- hello-world를 동작시켜보는 예
```
k8s@master1:~$ sudo docker images
k8s@master1:~$ sudo docker container ls
k8s@master1:~$ sudo docker ps -a
k8s@master1:~$ sudo docker pull hello-world
k8s@master1:~$ sudo docker images
k8s@master1:~$ sudo docker ps -a
k8s@master1:~$ sudo docker run hello-world
k8s@master1:~$ sudo docker ps -a



- 컨테이너 목록 확인 컨테이너 종료

```
k8s@master1:~$ sudo docker ps -a
k8s@master1:~$ sudo docker stop xxx
```

- 컨테이너 삭제와 컨테이너 목록 확인

```
k8s@master1:~$ sudo docker rm xxx
k8s@master1:~$ sudo docker ps -a
```

- 이미지 목록 확인

```
k8s@master1:~$ sudo docker images


- 이미지 삭제

```
k8s@master1:~$ sudo docker rmi xxx

- 이미지 목록 확인

```
k8s@master1:~$ sudo docker images

- Docker를 이용한 helloworld 개발/배포
```
k8s@master1:~$ mkdir container-ex
k8s@master1:~$ cd container-ex
k8s@master1:~/container-ex$ nano helloworld
k8s@master1:~/container-ex$ cat helloworld
`
#!/bin/sh

echo "Hello, World!"
`
k8s@master1:~/container-ex$ nano Dockerfile
k8s@master1:~/container-ex$ cat Dockerfile 
`
FROM ubuntu:20.04

COPY helloworld /usr/local/bin
RUN chmod +x /usr/local/bin/helloworld

CMD ["helloworld"]
`
k3s@master:~/container-ex$ sudo docker image build -t helloworld:latest .
k3s@master:~/container-ex $ sudo docker container run helloworld:latest
Hello, World!

k8s@master1:~/container-ex$ sudo docker rm $(sudo docker ps -aq)
k8s@master1:~/container-ex$ sudo docker rmi $(sudo docker images -aq)


### 3-2 Docker Compose 설치와 기본 명령어
k8s@master1:~$ sudo apt update
k8s@master1:~$ sudo apt-get install docker-compose-plugin
k8s@master1:~$ docker compose version
or
k8s@master1:~$ sudo docker compose version


-우분투 서버에서 nginx를 설치
```
k8s@master1:~$ pwd
/home/k8s
k8s@master1:~$ sudo apt-get update
k8s@master1:~$ sudo apt-get install nginx
k8s@master1:~$ nginx -v
k8s@master1:/etc/nginx$ sudo nano sites-available/default
k8s@master1:/etc/nginx$ sudo service nginx restart
k8s@master1:/etc/nginx$ curl 127.0.0.1

- 도커 런 명령어로  Nginx 서버를 컨테이너로 올리는 방법
```
k8s@master1:~$ sudo docker images
k8s@master1:~$ sudo docker container ls
k8s@master1:~$ sudo docker ps -a
k8s@master1:~$ sudo docker pull nginx
k8s@master1:~$ sudo docker images
k8s@master1:~$ sudo docker container ls
k8s@master1:~$ sudo docker ps -a
k8s@master1:~$ sudo docker run –d nginx
k8s@master1:~$ sudo docker run –d –p 80:80 nginx
k8s@master1:~$ sudo docker run -p 8080:80 nginx
k8s@master1:~$ curl http://localhost:8080

-Dockerfile 이용해 Nginx 서버를 컨테이너로 올리는 방법
```
k8s@master1:~$ mkdir df-01
k8s@master1:~$ cd df-01
k8s@master1:~/df-01:~$ nano Dockerfile
'
FROM ubuntu:20.04
MAINTAINER onlooker2zip "onlooker2zip@naver.com"
RUN apt-get update
RUN apt-get install -y nginx
WORKDIR /etc/nginx
CMD ["nginx", "-g", "daemon off;"]
EXPOSE 80
'
k8s@master1:~/df-01:~$ sudo docker build --tag mynginx:0.0.1 .
k8s@master1:~/df-01:~$ sudo docker images
k8s@master1:~/df-01:~$ sudo docker run --name mynginx -d -p 8081:80 mynginx:0.0.1
k8s@master1:~/df-01:~$ curl http://localhost:8081

-도커 컴포즈 이용해 Nginx 서버를 컨테이너로 올리는 방법 
`
k8s@master1:~$ mkdir dc-01
k8s@master1:~$ cd dc-01
k8s@master1:~/dc-01:~$ nano docker-compose.yml
'
version: "3"
services:
  nginx:
    image: nginx:latest
    ports:
      - 8082:80
'
k8s@master1:~/dc-01:~$ sudo docker compose up -d
k8s@master1:~/dc-01:~$ sudo docker ps -a
k8s@master1:~/dc-01:~$ curl localhost:8082

###Dockerfile이 있는 디렉토리에 docker-compose.yml
k8s@master1:~/df-01:~$ nano Dockerfile 
'
FROM ubuntu:20.04
MAINTAINER onlooker2zip "onlooker2zip@naver.com"
RUN apt-get update
RUN apt-get install -y nginx
WORKDIR /etc/nginx
CMD ["nginx", "-g", "daemon off;"]
EXPOSE 80
'
k8s@master1:~/df-01:~$ nano docker-compose.yml
'
version: "3"
services:
  nginx:
    build: .
    ports:
      - 8083:80
	  '
k8s@master1:~/df-01:~$ sudo docker compose up -d --build
k8s@master1:~/df-01:~$ sudo docker ps -a
k8s@master1:~/df-01:~$ curl http://localhost:8083


### 3-3. Docker와 Docker Compose 이슈
k8s@master1:~$ sudo docker stop $(sudo docker ps -aq) 
k8s@master1:~$ sudo docker rm $(sudo docker ps -aq)
k8s@master1:~$ sudo docker rmi $(sudo docker images -aq)
k8s@master1:~$ ifconfig
...
docker0: flags=4099<UP,BROADCAST,MULTICAST>  mtu 1500
        inet 172.17.0.1  netmask 255.255.0.0  broadcast 172.17.255.255
        inet6 fe80::42:8eff:fe40:e7eb  prefixlen 64  scopeid 0x20<link>
 ...
k8s@master1:~$ sudo docker network ls
NETWORK ID     NAME              DRIVER    SCOPE
fe648465bb95   bridge            bridge    local
...
k8s@master1:~$ sudo docker network inspect bridge
[
    {
        "Name": "bridge",
...
            "Config": [
                {
                    "Subnet": "172.17.0.0/16",
                    "Gateway": "172.17.0.1"
                }
            ]



**MySQL 생성**

```
sudo docker run -d -p 3306:3306 \
  -e MYSQL_ALLOW_EMPTY_PASSWORD=true \
  --name mysql \
  mysql:5.7
```

Database 생성

```
sudo docker exec -it mysql mysql
create database wp CHARACTER SET utf8;
grant all privileges on wp.* to wp@'%' identified by 'wp';
flush privileges;
quit
```

**Wordpress master생성**
qoO5zp$5OkHThpyM6R
```
sudo docker run -d -p 8000:80 \
  -e WORDPRESS_DB_HOST=172.17.0.1 \
  -e WORDPRESS_DB_NAME=wp \
  -e WORDPRESS_DB_USER=wp \
  -e WORDPRESS_DB_PASSWORD=wp \
  wordpress
```

http://xxxx:8000 접속


**네트워크 생성**

```
sudo docker network create app-network
```

**네트워크에 연결된 컨테이너 생성**

```
sudo docker run -d \
  -e MYSQL_ALLOW_EMPTY_PASSWORD=true \
  --name mysql \
  --network=app-network \
  mysql:5.7
```

```
sudo docker exec -it mysql mysql
create database wp CHARACTER SET utf8;
grant all privileges on wp.* to wp@'%' identified by 'wp';
flush privileges;
quit
```

```
sudo docker run -d -p 8000:80 \
  --network=app-network \
  -e WORDPRESS_DB_HOST=mysql \
  -e WORDPRESS_DB_NAME=wp \
  -e WORDPRESS_DB_USER=wp \
  -e WORDPRESS_DB_PASSWORD=wp \
  wordpress
```

**wordpress 생성**  H6KCLWgo0m1J4k0TtO

k8s@master1:~$ mkdir dc-02
k8s@master1:~$ cd dc-02
k8s@master1:~/dc-02:~$ nano docker-compose.yml

```yml
version: '3'
services:
  wordpress:
    image: wordpress
    environment:
      WORDPRESS_DB_HOST: mysql
      WORDPRESS_DB_NAME: wp
      WORDPRESS_DB_USER: wp
      WORDPRESS_DB_PASSWORD: wp
    ports:
      - "8000:80"
    restart: always
  mysql:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: wp
      MYSQL_DATABASE: wp
      MYSQL_USER: wp
      MYSQL_PASSWORD: wp
```
k8s@master1:~/dc-02:~$ sudo docker compose up -d


### 3-4 MSA (Micro Service Architecture) : 모놀리틱에서 마이크로서비스로 이동

-p옵션으로 폴더 만들때--부모폴더를 같이 만드는 옵션
k8s@master1:~$ mkdir -p ~/msa-ex1/{MicroService,Frontend-WebUI/templates}
k8s@master1:~$ cd msa-ex1/
k8s@master1:~/msa-ex1$ ls
Micro-services  Frontend-WebUI
k8s@master1:~/msa-ex1$ tree
.
├── Frontend-WebUI
│   └── templates
└── MicroService


3 directories, 5 files

**MicroService 생성**
k8s@master1:~/msa-ex1$cd MicroService/ 
k8s@master1:~/msa-ex1/MicroService$ nano entry.py
```
from flask import Flask, request
app = Flask(__name__)
@app.route("/")
def hello():
    return "Hello World!"
@app.route("/power/<int:base>/<int:index>")
def power(base, index):
    return "%d" % (base ** index)
@app.route("/addition/<int:x>/<int:y>")
def add(x, y):
    return "%d" % (x+y)
@app.route("/substraction/<int:x>/<int:y>")
def substract(x, y):
    return "%d" % (x-y)
if __name__ == "__main__":
    app.run(host='0.0.0.0')

```
k8s@master1:~/msa-ex1/MicroService$ nano Dockerfile
```
FROM ubuntu:20.04
# 패키지 업데이트
RUN apt-get update -y
# Python Setuptools 설치
RUN apt-get install -y python-setuptools git telnet curl
# pip 설치
RUN apt-get install -y python3-pip
# 번들 앱 소스
ADD . /src
WORKDIR /src
# Python 모듈 추가 및 설치
RUN pip install Flask
# Expose
EXPOSE 5000
# Run
CMD ["python3", "entry.py"]

```
# cat명령어 사용시 
cat > 생성파일이름
내용 작성후
cntl+엔터
cntl+D(나가기)

k8s@master1:~/msa-ex1/MicroService$ sudo docker build -t alphamega89/my-calc .

k8s@master1:~/msa-ex1/MicroService$ sudo docker login

k8s@master1:~/msa-ex1/MicroService$ sudo docker push looker2zip/my-calc

**Frontend-WebUI 생성**

k8s@master1:~/msa-ex1/MicroService$ cd ..
k8s@master1:~/msa-ex1$ ls
Frontend-WebUI  MicroService
k8s@master1:~/msa-ex1$ cd Frontend-WebUI/
k8s@master1:~/msa-ex1/Frontend-WebUI$ ls
templates
k8s@master1:~/msa-ex1/Frontend-WebUI$ nano entry.py
```
import os
import http.client as httplib
from flask import Flask, request, render_template
app = Flask(__name__)
@app.route("/")
def index():
	return render_template('index.html')
@app.route("/add", methods=['POST'])
def add():
	#
    # POST 매개변수에서
	#
    x = int(request.form['x'])
    y = int(request.form['y'])
    #
    # Kubernetes Service에서(환경 변수)
	#
    my_calc_host = os.environ['MY_CALC_SERVICE_SERVICE_HOST']
    my_calc_port = os.environ['MY_CALC_SERVICE_SERVICE_PORT']
    #
    # MicroService(my-calc)에 대한 REST 호출
	#
    client = httplib.HTTPConnection(my_calc_host, my_calc_port)
    client.request("GET", "/addition/%d/%d" % (x, y))
    response = client.getresponse()
    result = response.read()
    return render_template('index.html', add_x=x, add_y=y, add_result=result)
if __name__ == "__main__":
    app.debug = True
    app.run(host='0.0.0.0')
```


k8s@master1:~/msa-ex1/Frontend-WebUI$ cp ~/msa-ex1/MicroService/Dockerfile .
k8s@master1:~/msa-ex1/Frontend-WebUI$ ls
Dockerfile  entry.py  templates
k8s@master1:~/msa-ex1/Frontend-WebUI$ nano templates/index.html
```
<html>
   <body>
   <div>
         <form method="post" action="/add">
           <input type="text" name="x" size="2"/>
           <input type="text" name="y" size="2"/>
           <input type="submit" value="addition"/>
		 </form>
         {% if add_result %}
         <p>Answer : {{ add_x }} + {{ add_y }} = {{ add_result }}</p>
         {% endif %}    
   </div>
   </body>
</html>
```

k8s@master1:~/msa-ex1/Frontend-WebUI$ tree
.
├── Dockerfile
├── entry.py
└── templates
    └── index.html

1 directory, 3 files
k8s@master1:~/msa-ex1/Frontend-WebUI$ sudo docker build -t looker2zip/my-frontend .

k8s@master1:~/msa-ex1/Frontend-WebUI$ sudo docker push looker2zip/my-frontend


## 7교시 : Rancher의 k3s를 이용한 Kubernetes 환경 구축

### Master 노드
k8s@master1:~$ sudo nano /etc/hostname
``
master1.example.com
`

k8s@master1:~$ sudo nano /etc/hosts

`
10.0.2.110	master1.example.com	master1
10.0.2.111	m1-worker1.example.com	m1-worker1
10.0.2.112	m1-worker2.example.com	m1-worker2
10.0.2.120	master2.example.com	master2

`

k8s@master1:~$ sudo ufw disable

### Worker1 가상 시스템 환경 구성

k8s@master1:~$ sudo nano /etc/hostname

`
m1-worker1.example.com
`


k8s@master1:~$ sudo nano /etc/hosts
`
10.0.2.110	master1.example.com	master1
10.0.2.111	m1-worker1.example.com	m1-worker1
10.0.2.112	m1-worker2.example.com	m1-worker2
10.0.2.120	master2.example.com	master2
`

### Worker2 가상 시스템 환경 구성

k8s@master1:~$ sudo nano /etc/hostname

`
m1-worker2.example.com

`


k8s@master1:~$ sudo nano /etc/hosts
`
10.0.2.110	master1.example.com	master1
10.0.2.111	m1-worker1.example.com	m1-worker1
10.0.2.112	m1-worker2.example.com	m1-worker2
10.0.2.120	master2.example.com	master2
`


k8s@master1:~$ sudo ufw disable


k8s@master1:~$ sudo apt update
k8s@master1:~$ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=" \
server --cluster-init \
--disable traefik \
--disable metrics-server \
--node-name master1 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –


k8s@master1:~$ mkdir ~/.kube
k8s@master1:~$ sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
k8s@master1:~$ sudo chown -R $(id -u):$(id -g) ~/.kube
k8s@master1:~$ echo "export KUBECONFIG=~/.kube/config" >> ~/.bashrc
k8s@master1:~$ source ~/.bashrc



k8s@master1:~$ kubectl cluster-info
k8s@master1:~$ kubectl get node -o wide

노드토큰 확인명령
k8s@master1:~$ sudo cat /var/lib/rancher/k3s/server/node-token
K1062020ae0e66b556b901a6f42529d286573e88294e027a693397f181e07d1351f::server:0a812984e25e314c5f8487e5b1e260a3

마스터IP확인명령
k8s@master1:~$ kubectl get node master1 -ojsonpath="{.status.addresses[0].address}"
10.0.2.110
k8s@master1:~$ 



#### 워커 노드 – 워커1
k8s@m1-worker1:~$ sudo apt update
k8s@m1-worker1:~$ NODE_TOKEN=K10c2340be1fccca22c81f8f14ae6387bae6a7792f5729269f50389fbf2345dd02e::server:2896d9ec3ba3f2cd4f671b65c16992f2
k8s@m1-worker1:~$ MASTER_IP=10.0.2.110
k8s@m1-worker1:~$ curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER_IP:6443 \
K3S_TOKEN=$NODE_TOKEN \
INSTALL_K3S_EXEC="--node-name m1-worker1 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –


`
curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER_IP:6443 \
K3S_TOKEN=$NODE_TOKEN \
INSTALL_K3S_EXEC="--node-name m1-worker1 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –
`

k8s@master1:~k8s@master1:~$ kubectl get node -o wide



#### 워커 노드 – 워커2
k8s@m1-worker2:~$ sudo apt update
k8s@m1-worker2:~$ NODE_TOKEN=K10c2340be1fccca22c81f8f14ae6387bae6a7792f5729269f50389fbf2345dd02e::server:2896d9ec3ba3f2cd4f671b65c16992f2
k8s@m1-worker2:~$ MASTER_IP=10.0.2.110
k8s@m1-worker2:~$ curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER_IP:6443 \
K3S_TOKEN=$NODE_TOKEN \
INSTALL_K3S_EXEC="--node-name m1-worker2 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –

`

curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER_IP:6443 \
K3S_TOKEN=$NODE_TOKEN \
INSTALL_K3S_EXEC="--node-name m1-worker2 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –
`

k8s@master1:~k8s@master1:~$ kubectl get node -o wide



### 클러스터 환경을 삭제할 경우

마스터
/usr/local/bin/k3s-uninstall.sh

워커 노드 
/usr/local/bin/k3s-agent-uninstall.sh

### HA(고가용성) 멀티 클러스터 구성 이슈 관련 전체 소스

````

##### 마스터1
k3s@master:1~/바탕화면$ cat /etc/hostname
`
master1.example.com
`
k3s@master1:~/바탕화면$ cat /etc/hosts
`
127.0.0.1	localhost
127.0.1.1	k3s-VirtualBox

10.0.2.110	master1.example.com	master1
10.0.2.111	m1-worker1.example.com	m1-worker1


10.0.2.120	master2.example.com	master2
10.0.2.121	m2-worker1.example.com	m2-worker1
# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
`

k3s@master1:~/바탕화면$ /usr/local/bin/k3s-uninstall.sh
k3s@master1:~/바탕화면$ sudo apt update
k3s@master1:~/바탕화면$ sudo apt install -y docker.io nfs-common dnsutils curl

k3s@master1:~/바탕화면$ curl -sfL https://get.k3s.io | INSTALL_K3S_EXEC=" \
> server --cluster-init \
> --disable traefik \
> --disable metrics-server \
> --node-name master1 --docker" \
> INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –



k8s@master1:~$ mkdir ~/.kube
k8s@master1:~$ sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
k8s@master1:~$ sudo chown -R $(id -u):$(id -g) ~/.kube
k8s@master1:~$ echo "export KUBECONFIG=~/.kube/config" >> ~/.bashrc
k8s@master1:~$ source ~/.bashrc



k8s@master1:~$ kubectl cluster-info
k8s@master1:~$ kubectl get node -o wide


k8s@master1:~$ sudo cat /var/lib/rancher/k3s/server/node-token
K1062020ae0e66b556b901a6f42529d286573e88294e027a693397f181e07d1351f::server:0a812984e25e314c5f8487e5b1e260a3
k8s@master1:~$ kubectl get node master1 -ojsonpath="{.status.addresses[0].address}"
10.0.2.110
k8s@master1:~$ 


[마스터1-워크노드1 추가]
/usr/local/bin/k3s-agent-uninstall.sh
k8s@m1-worker1:~$ sudo apt update
k8s@m1-worker1:~$ NODE_TOKEN=K10c2340be1fccca22c81f8f14ae6387bae6a7792f5729269f50389fbf2345dd02e::server:2896d9ec3ba3f2cd4f671b65c16992f2
k8s@m1-worker1:~$ MASTER_IP=10.0.2.110
k8s@m1-worker1:~$ curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER_IP:6443 \
K3S_TOKEN=$NODE_TOKEN \
INSTALL_K3S_EXEC="--node-name m1-worker1 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –


`
curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER_IP:6443 \
K3S_TOKEN=$NODE_TOKEN \
INSTALL_K3S_EXEC="--node-name m1-worker1 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –
`







##### 마스터2

k3s@master2:~/바탕화면$ cat /etc/hostname
`
master1.example.com
`
k3s@master2:~/바탕화면$ cat /etc/hosts
`
127.0.0.1	localhost
127.0.1.1	k3s-VirtualBox

10.0.2.110	master1.example.com	master1
10.0.2.111	m1-worker1.example.com	m1-worker1


10.0.2.120	master2.example.com	master2
10.0.2.121	m2-worker1.example.com	m2-worker1
# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
`

k3s@master2:~/바탕화면$ /usr/local/bin/k3s-uninstall.sh
k3s@master2:~/바탕화면$ NODE_TOKEN=K10f8ea94056f82306e11b766b434877a99373d5822a2540a4e331d5ad6680e7f9d::server:3506a2678e5964eb9eb08defaf7a0353
k3s@master2:~/바탕화면$ MASTER_IP=10.0.2.110

k3s@master2:~/바탕화면$ curl -sfL https://get.k3s.io | K3S_TOKEN=$NODE_TOKEN \
INSTALL_K3S_EXEC=" \
server --server https://$MASTER_IP:6443 \
--disable traefik \
--disable metrics-server \
--node-name master2 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –

k8s@master2:~$ mkdir ~/.kube
k8s@master2:~$ sudo cp /etc/rancher/k3s/k3s.yaml ~/.kube/config
k8s@master2:~$ sudo chown -R $(id -u):$(id -g) ~/.kube
k8s@master2:~$ echo "export KUBECONFIG=~/.kube/config" >> ~/.bashrc
k8s@master2:~$ source ~/.bashrc


k8s@master2:~$ sudo cat /var/lib/rancher/k3s/server/node-token
K1062020ae0e66b556b901a6f42529d286573e88294e027a693397f181e07d1351f::server:0a812984e25e314c5f8487e5b1e260a3
k8s@master1:~$ kubectl get node master1 -ojsonpath="{.status.addresses[0].address}"
10.0.2.120
k8s@master1:~$ 

[마스터2-워크노드1 추가]
/usr/local/bin/k3s-agent-uninstall.sh
NODE_TOKEN=K10f8ea94056f82306e11b766b434877a99373d5822a2540a4e331d5ad6680e7f9d::server:3506a2678e5964eb9eb08defaf7a0353
MASTER2_IP=10.0.2.120



k8s@m2-worker1:~$ sudo apt update
k8s@m2-worker1:~$ NODE_TOKEN=K10c2340be1fccca22c81f8f14ae6387bae6a7792f5729269f50389fbf2345dd02e::server:2896d9ec3ba3f2cd4f671b65c16992f2
k8s@m2-worker1:~$ MASTER2_IP=10.0.2.120
k8s@m2-worker1:~$ curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER2_IP:6443 \
K3S_TOKEN=$NODE_TOKEN \
INSTALL_K3S_EXEC="--node-name m2-worker1 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –


`
curl -sfL https://get.k3s.io | K3S_URL=https://$MASTER2_IP:6443 \
K3S_TOKEN=$NODE_TOKEN \
INSTALL_K3S_EXEC="--node-name m2-worker1 --docker" \
INSTALL_K3S_VERSION="v1.20.0-rc4+k3s1" sh -s –
`




##### 확인
마스터 1과 마스터 2에서 모두 조회가 가능
k3s@master1:~/바탕화면$ kubectl get node -owide
NAME         STATUS   ROLES                       AGE    VERSION            INTERNAL-IP   EXTERNAL-IP   OS-IMAGE             KERNEL-VERSION     CONTAINER-RUNTIME
m1-worker1   Ready    <none>                      6m3s   v1.20.0-rc4+k3s1   10.0.2.111    <none>        Ubuntu 20.04.2 LTS   5.8.0-55-generic   docker://20.10.2
m2-worker1   Ready    <none>                      85s    v1.20.0-rc4+k3s1   10.0.2.121    <none>        Ubuntu 20.04.2 LTS   5.8.0-55-generic   docker://20.10.2
master1      Ready    control-plane,etcd,master   53m    v1.20.0-rc4+k3s1   10.0.2.110    <none>        Ubuntu 20.04.2 LTS   5.8.0-55-generic   docker://20.10.2
master2      Ready    control-plane,etcd,master   31m    v1.20.0-rc4+k3s1   10.0.2.120    <none>        Ubuntu 20.04.2 LTS   5.8.0-55-generic   docker://20.10.2
k3s@master1:~/바탕화면$ 

```

## 8 교시 : Kubernetes 개념과 사용

### 8-1  쿠버네티스의 기본 사용과 명령어
쿠버네티스 약어와 버전 확인
k8s@master1:~$ kubectl api-versions
k8s@master1:~$ kubectl api-resources

```
k8s@master1:~$ kubectl run nginx-pod1 --image=nginx --generator=run-pod/v1
k8s@master1:~$ kubectl run nginx-pod2 --image=nginx
k8s@master1:~$ kubectl create deployment dpy-nginx1 --image=nginx

// 이미지 nginx에 대해 2개의 복제본으로 배포를 실행하고 컨테이너 포트 80을 노출합니다.
k8s@master1:~$ kubectl run my-first-nginx --image=nginx --replicas=2 --port=80
// 모든 포드 가져오기
k8s@master1:~$ kubectl get pods
NAME                              READY     STATUS    RESTARTS   AGE my-first-nginx-7dcd87d4bf-jp572   1/1       Running   0          7m my-first-nginx-7dcd87d4bf-ns7h4   1/1       Running   0          7m
// 배포 상태 확인
k8s@master1:~$ kubectl get deployment
NAME             DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE my-first-nginx   2         2         2            2           2m


// my-first-nginx라는 복제 컨트롤러에 대해 포트 80을 노출합니다.
k8s@master1:~$ kubectl expose deployment my-first-nginx --port=80 --type=LoadBalancer

// 모든 서비스 받기
k8s@master1:~$ kbn n
NAME             TYPE           CLUSTER-IP      EXTERNAL-IP   PORT(S) AGE
kubernetes       ClusterIP      10.96.0.1       <none>        443/TCP 2h
my-first-nginx   LoadBalancer   10.102.141.22   <pending>     80:31620/TCP 3m
// my-first-nginx라는 이름의 배포 중지
k8s@master1:~$ kubectl delete deployment my-first-nginx

// my-first-nginx라는 서비스 중지하면, "my-first-nginx"가 삭제됨
k8s@master1:~$ kubectl delete service
k8s@master1:~$ kubectl describe service my-first-nginx

k8s@master1:~$ curl http://<clusterIP>
온프레미스 데이터 센터와 같은 사용자 지정 환경에서는 노드의 IP 주소를 통해 액세스할 수 있습니다.
k8s@master1:~$ curl http://<nodeIP>:<nodePort>
k8s@master1:~$ curl 10.103.85.175:80 
<!DOCTYPE html>
<html>
k8s@master1:~$ curl 192.168.79.10:80
<!DOCTYPE html> <html>
...
```
dpy-nginx2.yaml
`
apiVersion: apps/v1
kind: Deployment
metadata:
  name: dpy-nginx2
  labels:
    app: nginx
spec:
  replicas: 3
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
`

k8s@master1:~$ kubectl create -f dpy-nginx2.yaml
k8s@master1:~$ kubectl apply -f dpy-nginx2.yaml
k8s@master1:~$ kubectl edit deploy dpy-nginx2

